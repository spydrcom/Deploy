
Library: application
Implementation of Real Numbers domain - net.myorb.math.libraries.DefaultLibrary
net.myorb.math.expressions.gui.rendering.implementations.JmtexRenderLib@647aedb3
net.myorb.math.expressions.charting.implementations.JfreeChartLib@6a344fc6
Graphics parameter processing: MeshPlotEdgeSize=50; ContourPlotEdgeSize=400; 
2023.0201

Menu Script Path: cfg/gui/RealMenuBar.xml

Library: keywords-declarations

Library: keywords-primitive

Library: keywords-render

Library: keywords-properties

Library: keywords-workspace

Library: keywords-spline

Library: keywords-script

Library: keywords-tree

Library: keywords-Matrix

Library: keywords-plotting

Library: keywords-diffeq

Library: keywords-features

Library: algebraic
Symbol Override Detected for 'e' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'pi' from library 'algebraic' by instance in 'algebraic'
floor  (Floor)  to render as ?
ceil  (Ceil)  to render as ?

Library: arithmetic
NEGATE  (Negate)  to render as -
MINUS  (Subtraction)  to render as -
*  (Multiplication)  to render as ·
/  (Division)  to render as ÷

Library: boolean-logical

Library: boolean-relational

Library: calculus
'  (Prime)  to render as ?
''  (DPrime)  to render as ?
INTEGRALC  (Contour)  to render as ?
INTEGRALS  (Integral)  to render as ?
INTEGRALV  (Integral)  to render as ?

Library: matrix

Library: matrix-access

Library: matrix-arithmetic

Library: matrix-algebra

Library: polynomial-computation

Library: polynomial-evaluation

Library: vector
.  (Dot)  to render as ·
SIGMA  (Summation)  to render as ?
INTEGRAL  (Integral)  to render as ?
SUMMATION  (Summation)  to render as ?
PI  (Pi)  to render as ?

Library: pointer
->  (Lambda)  to render as ?

Library: statistics

Library: power

Library: trigpow

Library: coltlib

Library: clreal
B  (BernoulliNumber)  to render as ?
Bessel: J(p = 2.5)
Bessel: K(a = 0.3333333333333333)

Library: clmath
Symbol Override Detected for 'exp' from library 'power' by instance in 'clmath'
GAMMA  (Gamma)  to render as ?
Factorization Table Computation Starting, initialization complete
10000 Factorizations Computed
---
Sieve Of Eratosthenes (DEFAULT) used for prime generation
Algorithm TABLE SCAN will be used for prime range selection
Total primes recognized 1229
---
12ms
---
Euler Product initialized, 1229 primes prepared as factors

Library: mpmath
Symbol Override Detected for 'loggamma' from library 'clmath' by instance in 'mpmath'
PointCountWeighted added to list
IterationCrossRefWeighted added to list
PointCountWeightedWithSaturation added to list
PointCountWeightedWithValueSaturation added to list
LegacyAlternativeAlgorithm added to list
ValueWeightedWithAggregation added to list
IterationWeighted added to list

******************************
* Symbol Collection Compiled *
******************************

Algorithms: net.myorb.math.expressions.algorithms
BuiltinLibrary: net.myorb.math.expressions.algorithms.TrigPowJREImpl
CalctoolsCommands: net.myorb.calctools.commands
CalctoolsDictionary: net.myorb.calctools.dictionary
CalctoolsLibs: net.myorb.calctools.libraries
CalctoolsSyms: net.myorb.calctools.symbols
Charting: net.myorb.math.expressions.charting.implementations.JfreeChartLib
Command: net.myorb.calctools.symbols.Command
ConfigMgrClass: net.myorb.math.expressions.algorithms.ConfigurationManager
Constant: net.myorb.calctools.symbols.Constant
CurrentVersion: 2023.0201
DisplayGraphAtomic: net.myorb.math.expressions.charting.DisplayGraphAtomic
DisplayIO: net.myorb.math.expressions.gui.DisplayIO
FraculusModules: net.myorb.fraculus.modules.Selection
Function: net.myorb.calctools.symbols.Function
JREtrigPow: net.myorb.math.expressions.algorithms.TrigPowJREImpl
LIBRARIAN: net.myorb.math.expressions.symbols.LibraryManager
LegendBuilder: net.myorb.charting.PlotLegend
MasterCfg: net.myorb.math.libraries.DefaultLibrary
Operator: net.myorb.calctools.symbols.Operator
PowerImplementation: net.myorb.math.expressions.algorithms.ComboPrimitives
PrettyPrinter: net.myorb.math.expressions.PrettyPrinter
QuadMaster: net.myorb.math.computational.integration.Quadrature
Renderer: net.myorb.math.expressions.gui.rendering.implementations.JmtexRenderLib
TrigPow: net.myorb.math.expressions.algorithms.TrigPowPrimitives
Value: net.myorb.calctools.symbols.Value

algebraic (12 symbols):
	PlusMinus (+|-) {OP-7} - Plus or Minus operator
	MinusPlus (-|+) {OP-7} - Minus or Plus operator
	INF (INFINITY) {CON} '10000' * - Approximation to use for infinity
	Abs (abs) {OP-11} - ABS function value of parameter
	Ceil (ceil) {OP-11} '?' - Ceiling function
	E (e) {VAL}  <algebraic> - Symbol for the irrational value of e; Epsilon base of natural log
	e (e) {CON} '2.718281828459' >algebraic<  * - Epsilon base of natural log
	Floor (floor) {OP-11} '?' - Floor function
	FloorDiv (floordiv) {OP-11} - Floor function for quotient
	Pi (pi) {VAL}  <algebraic> - Symbol for the irrational value of pi; Trigonometric ratio of circle diameter to perimeter
	pi (pi) {CON} '3.141592653589793' >algebraic<  * - Symbol for the irrational value of pi
	Sgn (sgn) {OP-7} - Sign SGN function value of parameter


application (1 symbol):
	Status (VERSION) {CON} '2023.0201' * - software development version


arithmetic (7 symbols):
	Fraction (#/#) {OP-8} - Arithmetic division operator (expressed as fraction)
	Multiplication (*) {OP-8} '·' - Arithmetic multiplication operator
	Addition (+) {OP-7} - Arithmetic addition operator
	Subtraction (-) {OP-7} - Arithmetic (binary) subtraction or (unary) negate operator
	Division (/) {OP-8} '÷' - Arithmetic division operator
	Subtraction (MINUS) {OP-7} '-' - Arithmetic binary subtraction operator
	Negate (NEGATE) {OP-8} '-' - Arithmetic unary negation operator


boolean_logical (15 symbols):
	And (&) {OP-10} - Logical AND
	Choose (:) {OP-7} - Choice based on condition code
	ImpliedBy (<<=) {OP-10} - Logical implied by
	Implies (=>>) {OP-10} - Logical implies
	ConditionCode (?) {OP-10} - Logical condition code set
	False (FALSE) {VAL} - Logical FALSE
	True (TRUE) {VAL} - Logical TRUE
	Or (|) {OP-10} - Logical OR
	Xor (|~) {OP-10} - Logical XOR
	Not (~) {OP-10} - Logical NOT
	Nand (~&) {OP-10} - Logical NAND
	NimpliedBy (~<<=) {OP-10} - Logical NOT implied by
	Nimplies (~=>>) {OP-10} - Logical NOT implies
	Nor (~|) {OP-10} - Logical NOR
	Nxor (~|~) {OP-10} - Logical NOT XOR


boolean_relational (8 symbols):
	Lt (<) {OP-9} - Less than
	Le (<=) {OP-9} - Less than or equal to
	LtAbs (<||) {OP-9} - Less than absolute value of
	Eq (==) {OP-9} - Equal to
	Gt (>) {OP-9} - Greater than
	Ge (>=) {OP-9} - Greater than or equal to
	GtAbs (>||) {OP-9} - Greater than absolute value of
	Ne (~=) {OP-9} - Not equal to


calculus (12 symbols):
	TrapQuad ($#) {OP-11} - Mark function call for Trapezoidal integral approximation
	TrapAdjust ($%) {OP-11} - Mark function call for adjustment for brute force approximation
	DCTQuad ($@) {OP-11} - Mark function call for Clenshaw-Curtis integral approximation
	TSQuad ($|) {OP-11} - Mark function call for Tanh-Sinh integral approximation
	Prime (') {OP-11} '?' - Mark function call for first derivative approximation
	DPrime ('') {OP-11} '?' - Mark function call for second derivative approximation
	IntegrationDelta (<*>) {OP-10} - Integral delta marker for presentation
	Delta (<>) {OP-8} - Derivative approximation evaluated at left parameter using delta value in right parameter
	Contour (INTEGRALC) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional contour integral notation
	Integral (INTEGRALS) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional surface integral notation
	Integral (INTEGRALV) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional volume integral notation
	Interval (||) {OP-11} - Mark function call for interval evaluation

chartoptions: MeshPlotEdgeSize=50;ContourPlotEdgeSize=400

clmath (8 symbols):
	Gamma (GAMMA) {FUN} '?' - Lanczos Gamma function approximation
	Field (GET) {FUN} - Get a component of a structure
	Load (LOAD) {FUN} - Load a stored value
	Store (STORE) {FUN} - Store a portable value
	EulerProduct (ep) {OP-10} - Euler Product function
	Exp (exp) {FUN}  >power< - Euler exponential function
	IncompleteGamma (gammainc) {FUN} - Incomplete Gamma function
	Loggamma (loggamma) {FUN}  <mpmath> - Loggamma function

clmathselected: Exp Loggamma Incgamma Gamma Get Store Load

clreal (8 symbols):
	AiryAi (Ai) {FUN} - Airy Ai function
	BernoulliNumber (B) {OP-10} '?' - Bernoulli Number
	AiryBi (Bi) {FUN} - Airy Bi function
	E1Integral (E1) {OP-10} - E1 Exponential Integral
	ExponentialIntegral (Ei) {OP-10} - Exponential Integral
	Bessel (Jp) {OP-10} - Bessel Jp
	Bessel (Ka) {OP-10} - Bessel Ka
	LogarithmicIntegral (li) {OP-10} - Logarithmic Integral


coltlib (10 symbols):
	I0 (I0) {FUN} - Bessel I0 function from Colt library
	I0e (I0e) {FUN} - Bessel I0e function from Colt library
	I1 (I1) {FUN} - Bessel I1 function from Colt library
	I1e (I1e) {FUN} - Bessel I1e function from Colt library
	J0 (J0) {FUN} - Bessel J0 function from Colt library
	Jn (Jn) {FUN} - Bessel Jn function from Colt library
	K0 (K0) {FUN} - Bessel K0 function from Colt library
	Kn (Kn) {FUN} - Bessel Kn function from Colt library
	Y0 (Y0) {FUN} - Bessel Y0 function from Colt library
	Yn (Yn) {FUN} - Bessel Yn function from Colt library

coltlibselected: I0 I0e I1 I1e J0 K0 Y0 Jn Kn Yn

commands_declarations (13 symbols):
	Define (!!) {KEY} - Shorthand alias for DEFINE command
	SegmentedFunction (!$) {KEY} - Define a segmented user function as a list of polynomials
	HGPolynomial (!%) {KEY} - Declare a user function as a Hyper-Geometric polynomial
	Transform (!*) {KEY} - Define a function transform
	LibImport (!+) {KEY} - Define a user function as a library import
	TransformEnable (!^) {KEY} - Define a function as an integration transform source
	Configure (CONFIGURE) {KEY} - Configure a library of functions
	Define (DEFINE) {KEY} - Define a user function
	Family (FAMILY) {KEY} - Import polynomial power functions for named family
	Init (INIT) {KEY} - Init a symbol imported from a JAR source
	Instance (INSTANCE) {KEY} - Instance a symbol described by a library
	Library (LIBRARY) {KEY} - Construct a library of functions
	Requires (REQUIRES) {KEY} - Identify required data type support


commands_diffeq (4 symbols):
	Difeq (DIFEQ) {KEY} - Identify differential equation and describe
	Prepare (PREPARE) {KEY} - Alias selected function and derivatives for Diff EQ solution test
	PrepPoly (PREPPOLY) {KEY} - Alias selected polynomial and derivatives for Diff EQ solution test
	Tdes (TDES) {KEY} - Run error test of differential equation solution


commands_features (8 symbols):
	Dct (DCT) {KEY} - Apply Discrete Cosine Tranform to function
	Mandelbrot (MANDELBROT) {KEY} - Display a plot of the Mandelbrot set
	MaxMin (MAXMINOF) {KEY} - Find Max/Min of function near specified approximation
	Polynomial (POLYNOMIAL) {KEY} - Analyze a polynomial and tabulate key points
	Request (REQUEST) {KEY} - Request a value be entered for the specified variable
	Root (ROOTOF) {KEY} - Find root of function near specified approximation
	Rpn (RPN) {KEY} - Start the RPN calculator
	Serve (SERVE) {KEY} - Request service start on specified port


commands_matrix (2 symbols):
	Export (EXPORT) {KEY} - Export data to a file from specified matrix
	Import (IMPORT) {KEY} - Import data from a file into specified matrix


commands_plotting (14 symbols):
	Chart (CHART) {KEY} - Display a chart for a set of symbols
	Derive (DERIVE) {KEY} - Plot derivatives of a polynomial
	Entitled (ENTITLED) {KEY} - Change the title of the last frame displayed
	Fft (FFT) {KEY} - Compute and display a fast Fourier transform
	Graph (GRAPH) {KEY} - Display a graph of an array of data points
	Plot3d (PLOT3D) {KEY} - Plot a specified 2D domain of a 3D user defined function
	Plotc (PLOTC) {KEY} - Plot a specified 2D domain with contours of a 3D user defined function
	Plotf (PLOTF) {KEY} - Plot a specified range of a user defined function
	Plotl (PLOTL) {KEY} - Plot a specified range of lambda declared function(s)
	Plotm (PLOTM) {KEY} - Display tabular plot with data taken from a matrix
	Plott (PLOTT) {KEY} - Tabular plot with data taken from file
	Scatter (SCATTER) {KEY} - Produce an X/Y scatter plot
	SetContour (SETCONTOUR) {KEY} - Set color scheme manager for contour plots
	Comparison (SIDEBYSIDE) {KEY} - Produce a side-by-side plot comparison


commands_primitive (23 symbols):
	StartLoop (*{) {KEY} - Start a block of a counted loop
	Comment (//) {KEY} - Add a comment to the output stream
	Comment (//*) {KEY} - Associate a defining comment with a script
	StartConditional (?{) {KEY} - Start a conditional block
	Assert (ASSERT) {KEY} - Make a conditional assertion
	Background (BACKGROUND) {KEY} - Read a script file and execute as a background task
	Calculate (CALC) {KEY} - Shorthand alias for CALCULATE command
	Calculate (CALCULATE) {KEY} - Calculate and show value for an expression
	Describe (DESCRIBE) {KEY} - Add a description of a function to symbol table
	Docs (DOCS) {KEY} - Show the JavaDocs for this release
	Edit (EDIT) {KEY} - Edit snip of selected text
	Help (HELP) {KEY} - Show the HELP table
	PolyPrint (POLYPRINT) {KEY} - Format an array as a polynomial
	PrettyPrint (PRETTYPRINT) {KEY} - Show the formatted value of a symbol
	Radix (RADIX) {KEY} - Calculate and show value for an expression in specified radix
	Recognize (RECOGNIZE) {KEY} - Read a symbol definition file
	SetMode (SETMODE) {KEY} - Set value display mode and precision
	Show (SHOW) {KEY} - Show symbol table contents Symbols|Functions|Parent|ALL parents
	Tic (TIC) {KEY} - Show time and start a stop-watch
	Toc (TOC) {KEY} - Show elapsed time since last TIC
	Verify (VERIFY) {KEY} - Verify symbol present in current symbol table
	EndLoop (}*) {KEY} - Terminate a block of a counted loop
	EndConditional (}?) {KEY} - Terminate a conditional block


commands_properties (5 symbols):
	Pclr (PCLR) {KEY} - Clear all properties of a directory entry
	Pdel (PDEL) {KEY} - Delete the value of a property
	Pload (PLOAD) {KEY} - Load properties of a directory entry from jSON source
	Psave (PSAVE) {KEY} - Save properties of a directory entry to jSON file
	Pset (PSET) {KEY} - Set the value of a property


commands_render (4 symbols):
	Render (RENDER) {KEY} - Format and display (pretty print) an equation using MathML
	RenderDiffEq (RENDERD) {KEY} - Format and display (pretty print) a Differential Equation using MathML
	RenderFunction (RENDERF) {KEY} - Format and display (pretty print) a function using MathML
	Select (SELECT) {KEY} - Select a render display to be shown and used for output of RENDER commands


commands_script (5 symbols):
	Iterate (ITERATE) {KEY} - Read a script file and iterate
	ScriptPrint (SCRIPTPRINT) {KEY} - Display the contents of a script file
	ActiveScripts (SHOWACTIVE) {KEY} - Display the contents of the active scripts list
	ScriptCache (SHOWCACHE) {KEY} - Display the contents of the script cache
	ScriptFiles (SHOWFILES) {KEY} - Display the contents of the script directory


commands_spline (5 symbols):
	Encode (ENCODE) {KEY} - Encode a segmented function as a Java class
	Optimize (OPTIMIZE) {KEY} - Optimize polynomial function use by embedding constant coefficients
	SetDomain (SETDOMAIN) {KEY} - Set domain constraints on a function
	Spline (SPLINE) {KEY} - Open anti-derivative spline tool for function
	StdDomain (STDDOMAIN) {KEY} - Standardize a function domain to [-1,1]


commands_tree (5 symbols):
	Apply (APPLY) {KEY} - Apply a spline fit to an Expression Tree
	Express (EXPRESS) {KEY} - Enable Expression Tree generation for function
	LoadJson (LOADJSON) {KEY} - Load Expression Tree(s) from JSON source(s)
	LoadSpline (LOADSPLINE) {KEY} - Load spline description from JSON source(s)
	SaveJson (SAVEJSON) {KEY} - Save Expression Tree as JSON file


commands_workspace (2 symbols):
	Read (READ) {KEY} - Read a workspace storage file
	Save (SAVE) {KEY} - Save a workspace storage file


matrix (6 symbols):
	Adj (ADJ) {FUN} - Compute adjugate of matrix
	Cofactor (COFACTOR) {FUN} - Compute cofactor matrix from source
	Comatrix (COMATRIX) {FUN} - Compute comatrix matrix from source
	Minor (MINOR) {FUN} - Compute minor of matrix
	Trace (TR) {FUN} - Compute trace of matrix
	Transpose (TRANSPOSE) {FUN} - Compute transpose of matrix


matrix_access (11 symbols):
	Tensor (*^*) {OP-10} - Compute tensor product of two matrices
	Row (-#) {OP-10} - Matrix indexing operation selecting row vector
	Augmented (AUGMENTED) {FUN} - Construct augmented matrix from source matrix and additional column
	Column (COL) {FUN} - Read column vector from matrix
	Det (DET) {FUN} - Compute determinant of matrix
	Inv (INV) {FUN} - Compute inverse of matrix
	Row (ROW) {FUN} - Read row vector from matrix
	Tril (TRIL) {FUN} - Compute lower triangular matrix from source
	Triu (TRIU) {FUN} - Compute upper triangular matrix from source
	Diag (\#) {OP-10} - Matrix indexing operation selecting diag vector
	Col (|#) {OP-10} - Matrix indexing operation selecting column vector


matrix_arithmetic (5 symbols):
	Characteristic (CHARACTERISTIC) {FUN} - Compute characteristic polynomial for matrix
	Identity (IDENTITY) {FUN} - Compute identity matrix with specified size
	MatAdd (MATADD) {FUN} - Compute sum of two matrices
	MatMul (MATMUL) {FUN} - Compute product of two matrices
	Matrix (MATRIX) {FUN} - Construct matrix from array with dimensions


matrix_linalg (16 symbols):
	Decompose (DECOMPOSE) {FUN} - Decompose a matrix using a linear algebra library instance
	Eig (EIG) {FUN} - Compute Von Mises dominant eigen-pair
	Evalspline (EVALSPLINE) {FUN} - Evaluate a VC31 spline function at specified parameter
	Gaussian (GAUSSIAN) {FUN} - Solve linear equations with Gaussian elimination
	Genknot (GENKNOT) {FUN} - Construct a zero knot for odd or even functions
	LUD (LUD) {FUN} - Decompose specified matrix using LU algorithm
	DET (LUDDET) {FUN} - Compute matrix determinant using LUD
	INV (LUDINV) {FUN} - Compute matrix inverse using LUD
	Luxb (LUXB) {FUN} - matrix,Solve LUx=b general case from assignment array=LUXB(L;U;b)
	Pivot (PIVOT) {FUN} - Reorder a vector to a specified pattern
	QRD (QRD) {FUN} - Decompose specified matrix using QR algorithm
	QRSolve (QRS) {FUN} - Compute solution to system given requested vector and QR decomposed matrix
	SOE (SOE) {FUN} - Solve a system of equations using a linear algebra library instance
	Solve (SOLVE) {FUN} - Solve linear equations with column substitution
	Vanche (VANCHE) {FUN} - Construct Vandermonde matrix for a Chebyshev interpolation
	Vc31 (VC31) {FUN} - Solve LUx=b using VC31LU to produce Chebyshev spline for function values


mpmath (11 symbols):
	SiegelTheta (THETA) {OP-10}  * - Siegel THETA
	Corless (cp) {FUN} - Corless function
	Digamma (digamma) {OP-10} - Digamma
	Lambda (lambda) {OP-10}  * - Mangoldt Lambda
	Loggamma (loggamma) {OP-10}  >clmath<  * - Loggamma
	Psi (mangoldt) {OP-10}  * - Mangoldt Psi
	LambertW (omega) {FUN} - Lambert Omega function
	Polygamma (polygamma) {FUN} - Polygamma function
	Polylog (polylog) {FUN} - Jonquiere Polylog function
	Trigamma (trigamma) {OP-10} - Trigamma
	Zeta (watten) {OP-0} - Watten Zeta function

mpmathselected: Corless Omega Polylog Polygamma

pointer (2 symbols):
	Lambda (->) {OP-7} '?' - Lambda anonymous function declarative expression
	Deref (@|) {OP-9} - Pointer dereference


polynomial_computation (15 symbols):
	ArrayDer (ARRAYDER) {FUN} - Compute derivative of function described by array
	ArrayInt (ARRAYINT) {FUN} - Compute integral of function described by array
	ChebDer (CHEBDER) {FUN} - Compute derivative of Chebyshev T polynomial
	ChebDomain (CHEBDOM) {FUN} - Compute domain across given number of Chebyshev points
	ChebInterp (CHEBINTERP) {FUN} - Generate Chebyshev interpolation polynomial for function described by array
	ChebPoints (CHEBPTS) {FUN} - Compute given number of Chebyshev points
	ClenQuad (CLENQUAD) {FUN} - Compute integral of function described by Chebyshev polynomial
	Conv (CONV) {FUN} - Compute product of polynomials
	Deconv (DECONV) {FUN} - Compute quotient of polynomials
	GaussQuad (GAUSSQUAD) {FUN} - Apply Gauss Quadrature to build an integral of an interpolated Lagrange polynomial
	Interpolate (INTERPOLATE) {FUN} - Generate Lagrange interpolation polynomial for function described by array
	PolyDer (POLYDER) {FUN} - Compute derivative of polynomial
	PolyHg (POLYHG) {FUN} - Compute coefficients of hyper geometric polynomial
	PolyInt (POLYINT) {FUN} - Compute integral of polynomial
	Roots (ROOTS) {FUN} - Compute roots of polynomial


polynomial_evaluation (10 symbols):
	EulerEval (#*^) {OP-10} - Evaluate an Euler polynomial defined by a specified order
	ExpEval (*^#) {OP-10} - Evaluate an exponential ( a * exp (b * x) ) defined by an array containing (a : b)
	HarEval (+#*) {OP-10} - Evaluate a harmonic series defined by an array of coefficients ( c0 + c1*cos(x) + c2*cos(2x) + ... )
	PolyEval (+*^) {OP-10} - Evaluate a polynomial defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	PolyPrime (+*^') {OP-10} - Evaluate a polynomial derivative defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	PolyDprime (+*^'') {OP-10} - Evaluate a polynomial second derivative defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	ArrayEval (@#) {OP-10} - Evaluate function defined by array at X
	ClenshawEval (@*^) {OP-10} - Evaluate a Chebyshev polynomial using Clenshaw's special case defined by an array of coefficients ( c0 + c1*T[1](x) + c2*T[2](x) + ... )
	ClenshawPrime (@*^') {OP-10} - Evaluate a Chebyshev polynomial derivative using Clenshaw's special case defined by an array of coefficients,ClenshawPrime
	ClenshawDprime (@*^'') {OP-10} - Evaluate a Chebyshev polynomial second derivative using Clenshaw's special case defined by an array of coefficients


power (23 symbols):
	Factorial (!) {OP-10} - Unary conventional factorial operator
	DFactorial (!!) {OP-10} - Unary parity factorial operator
	BC (##) {OP-10} - Binomial coefficient operator (n ## k)
	BT (#$#) {OP-10} - Bells Triangle operator (n #$# m)
	EN (#%#) {OP-10} - Euler numbers operator (n #%# m)
	Ffal (#/) {OP-9} - Binary Factorial falling operator
	SN ($$) {OP-10} - Stirling numbers (first) operator (n $$ k)
	SNS ($$$) {OP-10} - Stirling numbers (second) operator (n $$$ k)
	Rem (%) {OP-8} - Binary conventional remainder operator n%m; integer only
	Exponentiation (**) {OP-9} - Binary conventional exponentiation operator x**y
	Radical (*\) {OP-9} - Binary root operator (left [times root of] right)
	Fris (/#) {OP-9} - Binary Factorial rising  operator
	Poch (/#+) {OP-9} - Pochhammer rising operator
	Lsh (<<) {OP-8} - Left shift operator
	Rsh (>>) {OP-8} - Right shift operator
	Bernoulli (BERNOULLI) {OP-10} - Bernoulli function B(m) for second (n=1) Bernoulli numbers
	Harmonic (HARMONIC) {OP-10} - Harmonic function
	Hypot (HYPOT) {FUN} - Distance in multi-dimensional space; SQRT of sum of squares of array elements
	Root (\) {OP-9} - Binary root operator (left [root of] right)
	Pow (^) {OP-9} - Binary conventional exponentiation operator x^n; intended for small integer exponents
	Exp (exp) {OP-10}  <clmath> - Exponentiation (anti-log) operator
	Log (ln) {OP-10} - Natural log function of complex value
	Sqrt (sqrt) {OP-9} - Unary square root operator


statistics (6 symbols):
	Cov (COV) {FUN} - Computed co-variance of an array of values
	Mean (MEAN) {FUN} - Mean of an array of values
	Median (MEDIAN) {FUN} - Median of an array of values
	Mode (Mode) {FUN} - Mode of an array of values
	StdDev (STDEV) {FUN} - Standard deviation of an array of values
	Var (VAR) {FUN} - Computed variance of an array of values


trigpow (38 symbols):
	TrigPow (acos) {OP-10} - ARC Cosine Operator
	TrigPow (acot) {OP-10} - ARC Cotangent Operator
	TrigPow (acsc) {OP-10} - ARC Cosecant Operator
	TrigPow (arcosh) {OP-10} - ARC Hyperbolic Cosine Operator
	TrigPow (arcoth) {OP-10} - ARC Hyperbolic Cotangent Operator
	TrigPow (arcsch) {OP-10} - ARC Hyperbolic Cosecant Operator
	TrigPow (arsech) {OP-10} - ARC Hyperbolic Secant Operator
	TrigPow (arsinh) {OP-10} - ARC Hyperbolic Sine Operator
	TrigPow (artanh) {OP-10} - ARC Hyperbolic Tangent Operator
	TrigPow (asec) {OP-10} - ARC Secant Operator
	TrigPow (asin) {OP-10} - ARC Sine Operator
	TrigPow (atan) {OP-10} - ARC Tangent Operator
	TrigPow (cos) {OP-10} - Cosine Operator
	TrigPow (cosCb) {OP-10} - Cosine Cubed Operator
	TrigPow (cosSq) {OP-10} - Cosine Squared Operator
	TrigPow (cosh) {OP-10} - Hyperbolic Cosine Operator
	TrigPow (cot) {OP-10} - Cotangent Operator
	TrigPow (cotCb) {OP-10} - Cotangent Cubed Operator
	TrigPow (cotSq) {OP-10} - Cotangent Squared Operator
	TrigPow (coth) {OP-10} - Hyperbolic Cotangent Operator
	TrigPow (csc) {OP-10} - Cosecant Operator
	TrigPow (cscCb) {OP-10} - Cosecant Cubed Operator
	TrigPow (cscSq) {OP-10} - Cosecant Squared Operator
	TrigPow (csch) {OP-10} - Hyperbolic Cosecant Operator
	TrigPow (cschSq) {OP-10} - Hyperbolic Cosecant Squared Operator
	TrigPow (sec) {OP-10} - Secant Operator
	TrigPow (secCb) {OP-10} - Secant Cubed Operator
	TrigPow (secSq) {OP-10} - Secant Squared Operator
	TrigPow (sech) {OP-10} - Hyperbolic Secant Operator
	TrigPow (sechSq) {OP-10} - Hyperbolic Secant Squared Operator
	TrigPow (sin) {OP-10} - Sine Operator
	TrigPow (sinCb) {OP-10} - Sine Cubed Operator
	TrigPow (sinSq) {OP-10} - Sine Squared Operator
	TrigPow (sinh) {OP-10} - Hyperbolic Sine Operator
	TrigPow (tan) {OP-10} - Tangent Operator
	TrigPow (tanCb) {OP-10} - Tangent Cubed Operator
	TrigPow (tanSq) {OP-10} - Tangent Squared Operator
	TrigPow (tanh) {OP-10} - Hyperbolic Tangent Operator


vector (24 symbols):
	Indexing (#) {OP-12} - Array indexing operation implemented as a binary operator
	Dot (.) {OP-10} '·' - Dot product of two arrays; lengths of arrays must match
	Range (..) {OP-12} - Array range operation implemented as a binary operator
	Append (APPEND) {FUN} - Append a series of arrays into one long array
	Array (ARRAY) {FUN} - Collect values into array
	Chebyshev (CHEBYSHEV) {FUN} - Apply Vandermonde matrix to solve for Chebyshev interpolation polynomial as curve of best fit
	Concat (CONCAT) {FUN} - Append a series of arrays into one long array
	Dot (DOT) {FUN} - Dot product of two arrays; lengths of arrays must match
	Dyadic (DYADIC) {FUN} - Compute dyadic product of 2 arrays
	Fitexp (FITEXP) {FUN} - Apply non-linear (logarithmic) regression to find curve of best fit
	Fitharmonic (FITHARMONIC) {FUN} - Apply harmonic series regression to find curve of best fit
	Fitline (FITLINE) {FUN} - Apply least squares regression to find line of best fit
	Fitpoly (FITPOLY) {FUN} - Apply Vandermonde matrix to solve for polynomial coefficients to find curve of best fit
	Integral (INTEGRAL) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional integral notation
	Interval (INTERVAL) {FUN} - Select sub-list of elements for interval lo-hi
	Lagrange (LAGRANGE) {FUN} - Apply Lagrange series to derive interpolation polynomial as curve of best fit
	Length (LENGTH) {FUN} - Length of an array treated as a unary function
	Max (MAX) {FUN} - Maximum value found in array
	Min (MIN) {FUN} - Minimum value found in array
	Pearson (PEARSON) {FUN} - Compute Pearson regression coefficient for X/Y data set pair
	Pi (PI) {FUN} '?' - Product of items of an array; traditional capital PI notation
	Summation (SIGMA) {FUN} '?' - Sum of items of an array; traditional capital SIGMA notation
	Stack (STACK) {FUN} - Append a series of arrays as rows into a matrix
	Summation (SUMMATION) {FUN} '?' - Sum of items of an array; summation functionality using SIGMA notation

Lib SPLINE config {description=custom spline generator using CPC}
Lib SPLINE config {factory=net.myorb.spline.ChebyshevSplineFactory, description=custom spline generator using CPC}
Lib SPLINE config {factory=net.myorb.spline.ChebyshevSplineFactory, trace=0, description=custom spline generator using CPC}
Lib QUAD config {method=TSQ, description=custom quadrature using TANH-SINH}
