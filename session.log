Factorization Table Computation Starting, initialization complete
5000000 Factorizations Computed
---
Sieve Of Eratosthenes used for prime generation
Algorithm BINARY SQRT will be used for prime range selection
Total primes recognized 348513
---
967ms
---

Library: application
net.myorb.math.libraries.FactorizationLibrary@24fa03a
net.myorb.math.expressions.gui.rendering.implementations.JmtexRenderLib@52acd371
net.myorb.math.expressions.charting.implementations.JfreeChartLib@668d6498
Graphics parameter processing: MeshPlotEdgeSize=50; ContourPlotEdgeSize=400; 
2022.1115

Menu Script Path: cfg/gui/IntegerMenuBar.xml

Library: keywords-declarations

Library: keywords-primitive

Library: keywords-render

Library: keywords-properties

Library: keywords-workspace

Library: keywords-spline

Library: keywords-script

Library: keywords-tree

Library: keywords-Matrix

Library: keywords-plotting

Library: keywords-diffeq

Library: keywords-features

Library: keywords-factored

Library: algebraic
Symbol Override Detected for 'e' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'pi' from library 'algebraic' by instance in 'algebraic'
floor  (Floor)  to render as ?
ceil  (Ceil)  to render as ?

Library: arithmetic
NEGATE  (Negate)  to render as -
MINUS  (Subtraction)  to render as -
*  (Multiplication)  to render as ·
/  (Division)  to render as ÷

Library: boolean-logical

Library: boolean-relational

Library: calculus
'  (Prime)  to render as ?
''  (DPrime)  to render as ?
INTEGRALC  (Contour)  to render as ?
INTEGRALS  (Integral)  to render as ?
INTEGRALV  (Integral)  to render as ?

Library: matrix

Library: matrix-access

Library: matrix-arithmetic

Library: matrix-algebra

Library: polynomial-computation

Library: polynomial-evaluation

Library: vector
.  (Dot)  to render as ·
SIGMA  (Summation)  to render as ?
INTEGRAL  (Integral)  to render as ?
SUMMATION  (Summation)  to render as ?
PI  (Pi)  to render as ?

Library: pointer
->  (Lambda)  to render as ?

Library: algebraic
Symbol Override Detected for 'e' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'pi' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'e' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'pi' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'INFINITY' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for '+|-' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for '-|+' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'sgn' from library 'algebraic' by instance in 'algebraic'
Symbol Override Detected for 'abs' from library 'algebraic' by instance in 'algebraic'

Library: power

Library: factored
Symbol Override Detected for '$$' from library 'power' by instance in 'factored'
Symbol Override Detected for '$$$' from library 'power' by instance in 'factored'
Symbol Override Detected for '/#+' from library 'power' by instance in 'factored'
Symbol Override Detected for '^' from library 'power' by instance in 'factored'
Symbol Override Detected for '%' from library 'power' by instance in 'factored'
Symbol Override Detected for '>>' from library 'power' by instance in 'factored'
Symbol Override Detected for '<<' from library 'power' by instance in 'factored'

******************************
* Symbol Collection Compiled *
******************************

Algorithms: net.myorb.math.expressions.algorithms
CalctoolsCommands: net.myorb.calctools.commands
CalctoolsDictionary: net.myorb.calctools.dictionary
CalctoolsLibs: net.myorb.calctools.libraries
CalctoolsSyms: net.myorb.calctools.symbols
Charting: net.myorb.math.expressions.charting.implementations.JfreeChartLib
Command: net.myorb.calctools.symbols.Command
Constant: net.myorb.calctools.symbols.Constant
CurrentVersion: 2022.1115
DisplayGraphAtomic: net.myorb.math.expressions.charting.DisplayGraphAtomic
DisplayIO: net.myorb.math.expressions.gui.DisplayIO
FactorTableSize: 5000000
Function: net.myorb.calctools.symbols.Function
MasterCfg: net.myorb.math.libraries.FactorizationLibrary
Operator: net.myorb.calctools.symbols.Operator
PowerImplementation: net.myorb.math.expressions.algorithms.ComboPrimitives
PrettyPrinter: net.myorb.math.expressions.PrettyPrinter
Renderer: net.myorb.math.expressions.gui.rendering.implementations.JmtexRenderLib
Value: net.myorb.calctools.symbols.Value

algebraic (11 symbols):
	PlusMinus (+|-) {OP-7}  >algebraic< - Plus or Minus operator
	MinusPlus (-|+) {OP-7}  >algebraic< - Minus or Plus operator
	INF (INFINITY) {CON} '10000' >algebraic<  * - Approximation to use for infinity
	Abs (abs) {OP-11}  >algebraic< - ABS function value of parameter
	E (e) {VAL}  <algebraic>  >algebraic< - Symbol for the irrational value of e; Epsilon base of natural log
	e (e) {CON} '2217887688014775253706633418653155893774469751201/815915283247897734345611269596115894272000000000' >algebraic<  * - Epsilon base of natural log
	Gcf (gcf) {FUN} - Greatest common factor of two integers
	Lcm (lcm) {FUN} - Least common multiple of two integers
	Pi (pi) {VAL}  <algebraic>  >algebraic< - Symbol for the irrational value of pi; Trigonometric ratio of circle diameter to perimeter
	pi (pi) {CON} '21635435826223721014375660045008708443308032/6886773115381979726095656985041272208303935' >algebraic<  * - Symbol for the irrational value of pi
	Sgn (sgn) {OP-7}  >algebraic< - Sign SGN function value of parameter


application (1 symbol):
	Status (VERSION) {CON} '2022.1115' * - software development version


arithmetic (7 symbols):
	Fraction (#/#) {OP-8} - Arithmetic division operator (expressed as fraction)
	Multiplication (*) {OP-8} '·' - Arithmetic multiplication operator
	Addition (+) {OP-7} - Arithmetic addition operator
	Subtraction (-) {OP-7} - Arithmetic (binary) subtraction or (unary) negate operator
	Division (/) {OP-8} '÷' - Arithmetic division operator
	Subtraction (MINUS) {OP-7} '-' - Arithmetic binary subtraction operator
	Negate (NEGATE) {OP-8} '-' - Arithmetic unary negation operator


boolean_logical (15 symbols):
	And (&) {OP-10} - Logical AND
	Choose (:) {OP-7} - Choice based on condition code
	ImpliedBy (<<=) {OP-10} - Logical implied by
	Implies (=>>) {OP-10} - Logical implies
	ConditionCode (?) {OP-10} - Logical condition code set
	False (FALSE) {VAL} - Logical FALSE
	True (TRUE) {VAL} - Logical TRUE
	Or (|) {OP-10} - Logical OR
	Xor (|~) {OP-10} - Logical XOR
	Not (~) {OP-10} - Logical NOT
	Nand (~&) {OP-10} - Logical NAND
	NimpliedBy (~<<=) {OP-10} - Logical NOT implied by
	Nimplies (~=>>) {OP-10} - Logical NOT implies
	Nor (~|) {OP-10} - Logical NOR
	Nxor (~|~) {OP-10} - Logical NOT XOR


boolean_relational (8 symbols):
	Lt (<) {OP-9} - Less than
	Le (<=) {OP-9} - Less than or equal to
	LtAbs (<||) {OP-9} - Less than absolute value of
	Eq (==) {OP-9} - Equal to
	Gt (>) {OP-9} - Greater than
	Ge (>=) {OP-9} - Greater than or equal to
	GtAbs (>||) {OP-9} - Greater than absolute value of
	Ne (~=) {OP-9} - Not equal to


calculus (12 symbols):
	TrapQuad ($#) {OP-11} - Mark function call for Trapezoidal integral approximation
	TrapAdjust ($%) {OP-11} - Mark function call for adjustment for brute force approximation
	DCTQuad ($@) {OP-11} - Mark function call for Clenshaw-Curtis integral approximation
	TSQuad ($|) {OP-11} - Mark function call for Tanh-Sinh integral approximation
	Prime (') {OP-11} '?' - Mark function call for first derivative approximation
	DPrime ('') {OP-11} '?' - Mark function call for second derivative approximation
	IntegrationDelta (<*>) {OP-10} - Integral delta marker for presentation
	Delta (<>) {OP-8} - Derivative approximation evaluated at left parameter using delta value in right parameter
	Contour (INTEGRALC) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional contour integral notation
	Integral (INTEGRALS) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional surface integral notation
	Integral (INTEGRALV) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional volume integral notation
	Interval (||) {OP-11} - Mark function call for interval evaluation

chartoptions: MeshPlotEdgeSize=50;ContourPlotEdgeSize=400

commands_declarations (13 symbols):
	Define (!!) {KEY} - Shorthand alias for DEFINE command
	SegmentedFunction (!$) {KEY} - Define a segmented user function as a list of polynomials
	HGPolynomial (!%) {KEY} - Declare a user function as a Hyper-Geometric polynomial
	Transform (!*) {KEY} - Define a function transform
	LibImport (!+) {KEY} - Define a user function as a library import
	TransformEnable (!^) {KEY} - Define a function as an integration transform source
	Configure (CONFIGURE) {KEY} - Configure a library of functions
	Define (DEFINE) {KEY} - Define a user function
	Family (FAMILY) {KEY} - Import polynomial power functions for named family
	Init (INIT) {KEY} - Init a symbol imported from a JAR source
	Instance (INSTANCE) {KEY} - Instance a symbol described by a library
	Library (LIBRARY) {KEY} - Construct a library of functions
	Requires (REQUIRES) {KEY} - Identify required data type support


commands_diffeq (4 symbols):
	Difeq (DIFEQ) {KEY} - Identify differential equation and describe
	Prepare (PREPARE) {KEY} - Alias selected function and derivatives for Diff EQ solution test
	PrepPoly (PREPPOLY) {KEY} - Alias selected polynomial and derivatives for Diff EQ solution test
	Tdes (TDES) {KEY} - Run error test of differential equation solution


commands_factored (3 symbols):
	Primegaps (PRIMEGAPS) {KEY} - Tabulate gaps between primes
	Primetable (PRIMETABLE) {KEY} - Tabulate prime factors starting from specified
	Runsieve (RUNSIEVE) {KEY} - Run a sieve to populate the primes table


commands_features (8 symbols):
	Dct (DCT) {KEY} - Apply Discrete Cosine Tranform to function
	Mandelbrot (MANDELBROT) {KEY} - Display a plot of the Mandelbrot set
	MaxMin (MAXMINOF) {KEY} - Find Max/Min of function near specified approximation
	Polynomial (POLYNOMIAL) {KEY} - Analyze a polynomial and tabulate key points
	Request (REQUEST) {KEY} - Request a value be entered for the specified variable
	Root (ROOTOF) {KEY} - Find root of function near specified approximation
	Rpn (RPN) {KEY} - Start the RPN calculator
	Serve (SERVE) {KEY} - Request service start on specified port


commands_matrix (2 symbols):
	Export (EXPORT) {KEY} - Export data to a file from specified matrix
	Import (IMPORT) {KEY} - Import data from a file into specified matrix


commands_plotting (14 symbols):
	Chart (CHART) {KEY} - Display a chart for a set of symbols
	Derive (DERIVE) {KEY} - Plot derivatives of a polynomial
	Entitled (ENTITLED) {KEY} - Change the title of the last frame displayed
	Fft (FFT) {KEY} - Compute and display a fast Fourier transform
	Graph (GRAPH) {KEY} - Display a graph of an array of data points
	Plot3d (PLOT3D) {KEY} - Plot a specified 2D domain of a 3D user defined function
	Plotc (PLOTC) {KEY} - Plot a specified 2D domain with contours of a 3D user defined function
	Plotf (PLOTF) {KEY} - Plot a specified range of a user defined function
	Plotl (PLOTL) {KEY} - Plot a specified range of lambda declared function(s)
	Plotm (PLOTM) {KEY} - Display tabular plot with data taken from a matrix
	Plott (PLOTT) {KEY} - Tabular plot with data taken from file
	Scatter (SCATTER) {KEY} - Produce an X/Y scatter plot
	SetContour (SETCONTOUR) {KEY} - Set color scheme manager for contour plots
	Comparison (SIDEBYSIDE) {KEY} - Produce a side-by-side plot comparison


commands_primitive (23 symbols):
	StartLoop (*{) {KEY} - Start a block of a counted loop
	Comment (//) {KEY} - Add a comment to the output stream
	Comment (//*) {KEY} - Associate a defining comment with a script
	StartConditional (?{) {KEY} - Start a conditional block
	Assert (ASSERT) {KEY} - Make a conditional assertion
	Background (BACKGROUND) {KEY} - Read a script file and execute as a background task
	Calculate (CALC) {KEY} - Shorthand alias for CALCULATE command
	Calculate (CALCULATE) {KEY} - Calculate and show value for an expression
	Describe (DESCRIBE) {KEY} - Add a description of a function to symbol table
	Docs (DOCS) {KEY} - Show the JavaDocs for this release
	Edit (EDIT) {KEY} - Edit snip of selected text
	Help (HELP) {KEY} - Show the HELP table
	PolyPrint (POLYPRINT) {KEY} - Format an array as a polynomial
	PrettyPrint (PRETTYPRINT) {KEY} - Show the formatted value of a symbol
	Radix (RADIX) {KEY} - Calculate and show value for an expression in specified radix
	Recognize (RECOGNIZE) {KEY} - Read a symbol definition file
	SetMode (SETMODE) {KEY} - Set value display mode and precision
	Show (SHOW) {KEY} - Show symbol table contents Symbols|Functions|Parent|ALL parents
	Tic (TIC) {KEY} - Show time and start a stop-watch
	Toc (TOC) {KEY} - Show elapsed time since last TIC
	Verify (VERIFY) {KEY} - Verify symbol present in current symbol table
	EndLoop (}*) {KEY} - Terminate a block of a counted loop
	EndConditional (}?) {KEY} - Terminate a conditional block


commands_properties (5 symbols):
	Pclr (PCLR) {KEY} - Clear all properties of a directory entry
	Pdel (PDEL) {KEY} - Delete the value of a property
	Pload (PLOAD) {KEY} - Load properties of a directory entry from jSON source
	Psave (PSAVE) {KEY} - Save properties of a directory entry to jSON file
	Pset (PSET) {KEY} - Set the value of a property


commands_render (4 symbols):
	Render (RENDER) {KEY} - Format and display (pretty print) an equation using MathML
	RenderDiffEq (RENDERD) {KEY} - Format and display (pretty print) a Differential Equation using MathML
	RenderFunction (RENDERF) {KEY} - Format and display (pretty print) a function using MathML
	Select (SELECT) {KEY} - Select a render display to be shown and used for output of RENDER commands


commands_script (5 symbols):
	Iterate (ITERATE) {KEY} - Read a script file and iterate
	ScriptPrint (SCRIPTPRINT) {KEY} - Display the contents of a script file
	ActiveScripts (SHOWACTIVE) {KEY} - Display the contents of the active scripts list
	ScriptCache (SHOWCACHE) {KEY} - Display the contents of the script cache
	ScriptFiles (SHOWFILES) {KEY} - Display the contents of the script directory


commands_spline (5 symbols):
	Encode (ENCODE) {KEY} - Encode a segmented function as a Java class
	Optimize (OPTIMIZE) {KEY} - Optimize polynomial function use by embedding constant coefficients
	SetDomain (SETDOMAIN) {KEY} - Set domain constraints on a function
	Spline (SPLINE) {KEY} - Open anti-derivative spline tool for function
	StdDomain (STDDOMAIN) {KEY} - Standardize a function domain to [-1,1]


commands_tree (5 symbols):
	Apply (APPLY) {KEY} - Apply a spline fit to an Expression Tree
	Express (EXPRESS) {KEY} - Enable Expression Tree generation for function
	LoadJson (LOADJSON) {KEY} - Load Expression Tree(s) from JSON source(s)
	LoadSpline (LOADSPLINE) {KEY} - Load spline description from JSON source(s)
	SaveJson (SAVEJSON) {KEY} - Save Expression Tree as JSON file


commands_workspace (2 symbols):
	Read (READ) {KEY} - Read a workspace storage file
	Save (SAVE) {KEY} - Save a workspace storage file


factored (25 symbols):
	Primorial (#!) {OP-9} - Primorial function on integer prime index
	Derangements ($!) {OP-9} - Subfactorial function on integer parameter
	SN ($$) {OP-10}  >power< - Stirling numbers (first) operator (n $$ k)
	SNS ($$$) {OP-10}  >power< - Stirling numbers (second) operator (n $$$ k)
	RemOp (%) {OP-8}  >power< - Binary conventional remainder operator n%m; integer only
	Poch (/#+) {OP-9}  >power< - Pochhammer rising operator
	DivRemOp (/%) {OP-9} - Divisor and remainder from operator
	Lsh (<<) {OP-8}  >power< - Left shift operator
	Rsh (>>) {OP-8}  >power< - Right shift operator
	Ceil (CEIL) {FUN} - Ceiling function for a factored value
	DivRem (DIVREM) {FUN} - Divisor and remainder from integer division
	Factors (FACTORS) {FUN} - Get an array of all prime factors of the parameter
	Floor (FLOOR) {FUN} - Floor function for a factored value
	Fudge (FUDGE) {FUN} - Adjust blob factor to reduce representation size
	Gcd (GCD) {FUN} - Common divisor of two integers
	Gcf (GCF) {FUN} - Greatest Common Factor of two integers
	Lcm (LCM) {FUN} - Least Common Multiple of two integers
	Mod (MOD) {FUN} - Modulus of two integers
	ModPow (MODPOW) {FUN} - Modulus of exponentiation of two integers
	PIFunction (PIF) {OP-9} - PI counting function
	Primes (PRIMES) {FUN} - Get an array of all primes less than parameter
	PrimeN (Pn) {OP-9} - Nth prime number
	Rem (REM) {FUN} - Remainder from division of two integers
	Round (ROUND) {FUN} - Round function for a factored value
	Pow (^) {OP-9}  >power< - Binary conventional exponentiation operator x^n; intended for small integer exponents


matrix (6 symbols):
	Adj (ADJ) {FUN} - Compute adjugate of matrix
	Cofactor (COFACTOR) {FUN} - Compute cofactor matrix from source
	Comatrix (COMATRIX) {FUN} - Compute comatrix matrix from source
	Minor (MINOR) {FUN} - Compute minor of matrix
	Trace (TR) {FUN} - Compute trace of matrix
	Transpose (TRANSPOSE) {FUN} - Compute transpose of matrix


matrix_access (11 symbols):
	Tensor (*^*) {OP-10} - Compute tensor product of two matrices
	Row (-#) {OP-10} - Matrix indexing operation selecting row vector
	Augmented (AUGMENTED) {FUN} - Construct augmented matrix from source matrix and additional column
	Column (COL) {FUN} - Read column vector from matrix
	Det (DET) {FUN} - Compute determinant of matrix
	Inv (INV) {FUN} - Compute inverse of matrix
	Row (ROW) {FUN} - Read row vector from matrix
	Tril (TRIL) {FUN} - Compute lower triangular matrix from source
	Triu (TRIU) {FUN} - Compute upper triangular matrix from source
	Diag (\#) {OP-10} - Matrix indexing operation selecting diag vector
	Col (|#) {OP-10} - Matrix indexing operation selecting column vector


matrix_arithmetic (5 symbols):
	Characteristic (CHARACTERISTIC) {FUN} - Compute characteristic polynomial for matrix
	Identity (IDENTITY) {FUN} - Compute identity matrix with specified size
	MatAdd (MATADD) {FUN} - Compute sum of two matrices
	MatMul (MATMUL) {FUN} - Compute product of two matrices
	Matrix (MATRIX) {FUN} - Construct matrix from array with dimensions


matrix_linalg (9 symbols):
	Eig (EIG) {FUN} - Compute Von Mises dominant eigen-pair
	Evalspline (EVALSPLINE) {FUN} - Evaluate a VC31 spline function at specified parameter
	Gaussian (GAUSSIAN) {FUN} - Solve linear equations with Gaussian elimination
	Genknot (GENKNOT) {FUN} - Construct a zero knot for odd or even functions
	Luxb (LUXB) {FUN} - matrix,Solve LUx=b general case from assignment array=LUXB(L;U;b)
	Pivot (PIVOT) {FUN} - Reorder a vector to a specified pattern
	Solve (SOLVE) {FUN} - Solve linear equations with column substitution
	Vanche (VANCHE) {FUN} - Construct Vandermonde matrix for a Chebyshev interpolation
	Vc31 (VC31) {FUN} - Solve LUx=b using VC31LU to produce Chebyshev spline for function values


pointer (2 symbols):
	Lambda (->) {OP-7} '?' - Lambda anonymous function declarative expression
	Deref (@|) {OP-9} - Pointer dereference


polynomial_computation (13 symbols):
	ArrayDer (ARRAYDER) {FUN} - Compute derivative of function described by array
	ArrayInt (ARRAYINT) {FUN} - Compute integral of function described by array
	ChebDer (CHEBDER) {FUN} - Compute derivative of Chebyshev T polynomial
	ChebInterp (CHEBINTERP) {FUN} - Generate Chebyshev interpolation polynomial for function described by array
	ClenQuad (CLENQUAD) {FUN} - Compute integral of function described by Chebyshev polynomial
	Conv (CONV) {FUN} - Compute product of polynomials
	Deconv (DECONV) {FUN} - Compute quotient of polynomials
	GaussQuad (GAUSSQUAD) {FUN} - Apply Gauss Quadrature to build an integral of an interpolated Lagrange polynomial
	Interpolate (INTERPOLATE) {FUN} - Generate Lagrange interpolation polynomial for function described by array
	PolyDer (POLYDER) {FUN} - Compute derivative of polynomial
	PolyHg (POLYHG) {FUN} - Compute coefficients of hyper geometric polynomial
	PolyInt (POLYINT) {FUN} - Compute integral of polynomial
	Roots (ROOTS) {FUN} - Compute roots of polynomial


polynomial_evaluation (10 symbols):
	EulerEval (#*^) {OP-10} - Evaluate an Euler polynomial defined by a specified order
	ExpEval (*^#) {OP-10} - Evaluate an exponential ( a * exp (b * x) ) defined by an array containing (a : b)
	HarEval (+#*) {OP-10} - Evaluate a harmonic series defined by an array of coefficients ( c0 + c1*cos(x) + c2*cos(2x) + ... )
	PolyEval (+*^) {OP-10} - Evaluate a polynomial defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	PolyPrime (+*^') {OP-10} - Evaluate a polynomial derivative defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	PolyDprime (+*^'') {OP-10} - Evaluate a polynomial second derivative defined by an array of coefficients ( c0 + c1*x + c2*x^2 + ... )
	ArrayEval (@#) {OP-10} - Evaluate function defined by array at X
	ClenshawEval (@*^) {OP-10} - Evaluate a Chebyshev polynomial using Clenshaw's special case defined by an array of coefficients ( c0 + c1*T[1](x) + c2*T[2](x) + ... )
	ClenshawPrime (@*^') {OP-10} - Evaluate a Chebyshev polynomial derivative using Clenshaw's special case defined by an array of coefficients,ClenshawPrime
	ClenshawDprime (@*^'') {OP-10} - Evaluate a Chebyshev polynomial second derivative using Clenshaw's special case defined by an array of coefficients


power (23 symbols):
	Factorial (!) {OP-10} - Unary conventional factorial operator
	DFactorial (!!) {OP-10} - Unary parity factorial operator
	BC (##) {OP-10} - Binomial coefficient operator (n ## k)
	BT (#$#) {OP-10} - Bells Triangle operator (n #$# m)
	EN (#%#) {OP-10} - Euler numbers operator (n #%# m)
	Ffal (#/) {OP-9} - Binary Factorial falling operator
	SN ($$) {OP-10}  <factored> - Stirling numbers (first) operator (n $$ k)
	SNS ($$$) {OP-10}  <factored> - Stirling numbers (second) operator (n $$$ k)
	Rem (%) {OP-8}  <factored> - Binary conventional remainder operator n%m; integer only
	Exponentiation (**) {OP-9} - Binary conventional exponentiation operator x**y
	Radical (*\) {OP-9} - Binary root operator (left [times root of] right)
	Fris (/#) {OP-9} - Binary Factorial rising  operator
	Poch (/#+) {OP-9}  <factored> - Pochhammer rising operator
	Lsh (<<) {OP-8}  <factored> - Left shift operator
	Rsh (>>) {OP-8}  <factored> - Right shift operator
	Bernoulli (BERNOULLI) {OP-10} - Bernoulli function B(m) for second (n=1) Bernoulli numbers
	Harmonic (HARMONIC) {OP-10} - Harmonic function
	Hypot (HYPOT) {FUN} - Distance in multi-dimensional space; SQRT of sum of squares of array elements
	Root (\) {OP-9} - Binary root operator (left [root of] right)
	Pow (^) {OP-9}  <factored> - Binary conventional exponentiation operator x^n; intended for small integer exponents
	Exp (exp) {OP-10} - Exponentiation (anti-log) operator
	Log (ln) {OP-10} - Natural log function of complex value
	Sqrt (sqrt) {OP-9} - Unary square root operator


vector (24 symbols):
	Indexing (#) {OP-12} - Array indexing operation implemented as a binary operator
	Dot (.) {OP-10} '·' - Dot product of two arrays; lengths of arrays must match
	Range (..) {OP-12} - Array range operation implemented as a binary operator
	Append (APPEND) {FUN} - Append a series of arrays into one long array
	Array (ARRAY) {FUN} - Collect values into array
	Chebyshev (CHEBYSHEV) {FUN} - Apply Vandermonde matrix to solve for Chebyshev interpolation polynomial as curve of best fit
	Concat (CONCAT) {FUN} - Append a series of arrays into one long array
	Dot (DOT) {FUN} - Dot product of two arrays; lengths of arrays must match
	Dyadic (DYADIC) {FUN} - Compute dyadic product of 2 arrays
	Fitexp (FITEXP) {FUN} - Apply non-linear (logarithmic) regression to find curve of best fit
	Fitharmonic (FITHARMONIC) {FUN} - Apply harmonic series regression to find curve of best fit
	Fitline (FITLINE) {FUN} - Apply least squares regression to find line of best fit
	Fitpoly (FITPOLY) {FUN} - Apply Vandermonde matrix to solve for polynomial coefficients to find curve of best fit
	Integral (INTEGRAL) {FUN} '?' - Sum of items of an array constructed based on delta terms; using traditional integral notation
	Interval (INTERVAL) {FUN} - Select sub-list of elements for interval lo-hi
	Lagrange (LAGRANGE) {FUN} - Apply Lagrange series to derive interpolation polynomial as curve of best fit
	Length (LENGTH) {FUN} - Length of an array treated as a unary function
	Max (MAX) {FUN} - Maximum value found in array
	Min (MIN) {FUN} - Minimum value found in array
	Pearson (PEARSON) {FUN} - Compute Pearson regression coefficient for X/Y data set pair
	Pi (PI) {FUN} '?' - Product of items of an array; traditional capital PI notation
	Summation (SIGMA) {FUN} '?' - Sum of items of an array; traditional capital SIGMA notation
	Stack (STACK) {FUN} - Append a series of arrays as rows into a matrix
	Summation (SUMMATION) {FUN} '?' - Sum of items of an array; summation functionality using SIGMA notation

MAT(2,1)
MAT(2,2)
