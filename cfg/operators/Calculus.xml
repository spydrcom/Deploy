<JXR>

	<!-- get access to master object for calculus functions -->
	<class called='CalculusLib' package='Algorithms' name='CalculusPrimitives'/>
	<void><new saveAs='algorithms' class='CalculusLib' using='environment' /></void>
 
	<!-- create library to collect calculus operators -->
	<class called='ClMathLib' package='CalctoolsLibs' name='ClMath'/>

	<void><new saveAs='calculus' class='ClMathLib'/></void>
	<call object='calculus' method='setName'> <string>calculus</string> </call>


	<!--
			process operators that provide numerical approximations of Calculus functionality
	  -->

	<populate class='Operator' using='calculus' toBeCalled='GRAD DIV CURL TSQuad DCTQuad TrapQuad TrapAdjust Interval Prime DPrime Delta IntegrationDelta' />

	<!-- Tanh-Sinh integral approximation  -->
	<bean references='TSQuad'> <text Description='Mark function call for Tanh-Sinh integral approximation' Reference='TSQuad' Symbol='$|' /> <set Precedence='11' /> </bean>

	<!-- Clenshaw-Curtis integral approximation  -->
	<bean references='DCTQuad'> <text Description='Mark function call for Clenshaw-Curtis integral approximation' Reference='DCTQuad' Symbol='$@' /> <set Precedence='11' /> </bean>

	<!-- Trapezoidal integral approximation  -->
	<bean references='TrapQuad'> <text Description='Mark function call for Trapezoidal integral approximation' Reference='TrapQuad' Symbol='$#' /> <set Precedence='11' /> </bean>

	<!-- adjustment to Trapezoidal approximation for end-points -->
	<bean references='TrapAdjust'> <text Description='Mark function call for adjustment for brute force approximation' Reference='TrapAdjust' Symbol='$%' /> <set Precedence='11' /> </bean>

	<!-- interval evaluation { f(hi) - f(lo) }  -->
	<bean references='Interval'> <text Description='Mark function call for interval evaluation' Reference='Interval' Symbol='||' /> <set Precedence='11' /> </bean>

	<!-- approximate derivative of function at specified parameter  -->
	<bean references='Prime'> <text Description='Mark function call for first derivative approximation' Reference='Prime' Symbol='&apos;' /> <text RenderAs='&#x2032;' /> <set Precedence='11' /> </bean>

	<!-- approximate second derivative of function  -->
	<bean references='DPrime'> <text Description='Mark function call for second derivative approximation' Reference='DPrime' Symbol='&apos;&apos;' /> <text RenderAs='&#x2033;' /> <set Precedence='11' /> </bean>

	<!-- the operator that identifies the delta to use  -->
	<!-- approximation is computed using { ( f(x+delta) - f(x) ) / delta }, simple rise over run calculation -->
	<bean references='Delta'> <text Description='Derivative approximation evaluated at left parameter using delta value in right parameter' Reference='Delta' Symbol='&lt;&gt;' /> <set Precedence='8' /> </bean>

	<!-- the operators that indicate multiple variable partial derivative dot or cross products  -->
	<bean references='GRAD'> <text Description='Gradient operator' Reference='Grad' Symbol='grad' /> <text RenderAs='&#x2207;' /> <set Precedence='9' /> </bean>
	<bean references='DIV'> <text Description='Divergence  operator' Reference='Div' Symbol='div' /> <text RenderAs='&#x2207;' /> <set Precedence='9' /> </bean>
	<bean references='CURL'> <text Description='Curl operator' Reference='Curl' Symbol='curl' /> <text RenderAs='&#x2207;' /> <set Precedence='9' /> </bean>

	<!-- the delta place holder for approximation calculation and render  -->
	<!-- the delta symbol identifying the point in calculation of integral where the delta of the x-axis should be multiplied into the summation  -->
	<bean references='IntegrationDelta'> <text Description='Integral delta marker for presentation' Reference='IntegrationDelta' Symbol='&lt;*&gt;' /> <set Precedence='10' /> </bean>

	<!-- invoke macro to generate operator symbols and add them to symbol table -->
	<expand indirectUsing='symbolBean' path='cfg/OperatorSymbol.xml' using='algorithms symbolTable' 
			including='GRAD DIV CURL TSQuad DCTQuad TrapQuad TrapAdjust Interval Prime DPrime Delta IntegrationDelta'
	 />


	<class called='VectorLib' package='Algorithms' name='VectorPrimitives' />
	<void> <new saveAs='algorithms' class='VectorLib' using='environment' /> </void>

	<populate class='Function' using='calculus' 
			toBeCalled='INTEGRALC INTEGRALS INTEGRALV' />

	<bean references='INTEGRALC'> <text Description='Sum of items of an array constructed based on delta terms; using traditional contour integral notation' Reference='Contour' Symbol='INTEGRALC' /> <text RenderAs='&#x222E;' /> </bean>
	<bean references='INTEGRALS'> <text Description='Sum of items of an array constructed based on delta terms; using traditional surface integral notation' Reference='Integral' Symbol='INTEGRALS' /> <text RenderAs='&#x222F;' /> </bean>
	<bean references='INTEGRALV'> <text Description='Sum of items of an array constructed based on delta terms; using traditional volume integral notation' Reference='Integral' Symbol='INTEGRALV' /> <text RenderAs='&#x2230;' /> </bean>

	<expand indirectUsing='symbolBean' path='cfg/FunctionSymbol.xml' using='algorithms symbolTable' 
			including='INTEGRALC INTEGRALS INTEGRALV'
	 />


	<Export using='calculus' />


</JXR>