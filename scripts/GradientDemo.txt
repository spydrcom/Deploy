

//*  Gradient test function


// 2 parameters returning scalar
!! f ( x, y ) = - ( cos(x)^2 + cos(y)^2 )^2
// PLOT3D f (-2, -2)  4 4

// samples from gradient
!! FM ( x, y ) = grad f ( x, y )  

// vector field plot of gradient
// PLOTV FM ( 1, 1 )  4  20

// scalar result so  gradient is vector
FGV = FM ( 1, 1 )  ;  PRETTYPRINT FGV

// divergence plot
!! FD ( x, y ) = div f ( x, y )  
// PLOTC FD ( 1.6 , 1.6 )  3

// Laplacian plot
!! FL ( x, y ) = laplace f ( x, y )  
// PLOTC FL ( 1.6 , 1.6 )  3

// alternative centered
// PLOT3D f ( 1.6 , 1.6 )   3  3 
// PLOTV FM ( 1.6 , 1.6 )   3  20		// 20 direction indicators per axis
// PLOTC FD ( 1.6 , 1.6 )   3			// full cycle (congested) display
// PLOTC FD ( 2.4 , 2.4 )  1.5			// or half cycle version
// PLOTC f  ( 1.6 , 1.6 )   3



// 2 parameters returning scalar
!! Q ( x, y ) = x * exp ( - (x^2 + y^2) ) 
// PLOT3D Q (-2, -2)  4 4

// samples from gradient
!! QM ( x, y ) = grad Q ( x, y ) 

// vector field plot of gradient
   PLOTV QM (  -2  ,  -2  ) 4 20
// PLOTV QM ( -1.5 , -1.5 ) 3 20		// alternate zoom factor

// scalar result so  gradient is vector
QGV = QM ( 1, 1 )  ;  PRETTYPRINT QGV

!! QD ( x, y ) = div Q ( x, y )  
PLOTC QD ( -2, -2 ) 4

// Laplacian plot
!! QL ( x, y ) = laplace Q ( x, y )  
PLOTC QL ( -2, -2 ) 4



// 3 parameters returning vector
!! T ( x, y, z ) = ( y, -x, 0 )
// PLOT3D T (-4, -4)  8 8

// samples from gradient
!! TM ( x, y, z ) = grad T ( x, y, z )  

// vector result so  gradient is matrix
TGV = TM ( 1, 1, 1 )  ;  PRETTYPRINT TGV

// gradient is constant everywhere so curl is constant vector
C = curl T  ( 3, 3, 3 )  
PRETTYPRINT C


REQUIRES complex

// complex function test (using Airy Ai)

READ AiryBesselIdentities.txt

// verify Ai function available
CALC Ai (-2)

// simple gradient test
M = grad Ai (-2)
PRETTYPRINT  M

// simple curl test
C = curl Ai (-2)
PRETTYPRINT  C

// simple divergence test
D = div Ai (-2)
CALC  D

// gradient of complex plane segment for Ai & Bi
!! AiM ( x, y ) = grad Ai ( x +!* y )  
!! BiM ( x, y ) = grad Bi ( x +!* y )  

// test computation of gradient
//   at imaginary point
AiGV = AiM ( 1, 1 )
PRETTYPRINT AiGV

// divergence of complex plane segment
!! AiD ( x, y ) = div Ai ( x +!* y )  
CALC AiD ( -3, -1 )

// plot gradient and divergence of Ai
//   complex segment at -4 < x < -1
// PLOTV  AiM ( -4, -4 ) 3 20
// PLOTV  BiM ( -6, -6 ) 5.5 20
// PLOT3D AiD ( -4, -4 ) 3 3

