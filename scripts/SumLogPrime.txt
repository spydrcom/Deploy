

//* regression of the sum of logs less than X


// up to 1000
P = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)


N = LENGTH P
CALC  N


Pp1 = ARRAY [ 0 <= i < N ] ( P#i + 1 )
CALC  Pp1

!! sum (n) = n==0? 0:  SIGMA [  0 <= j < n ]  ( ln ( P#j ) )

chk = 44
CALC  sum chk
CALC  P#chk

logSum = ARRAY [ 0 <= i < N ] ( sum i  )
CALC  logSum

// regression showing correlation
CALC  FITLINE  ( Pp1,  logSum )




// ============================================================

// using primorial in factorized system

init "net.myorb.math.primenumbers.PowerLibrary" named "ln" op "LN"

!! check (n) = ln (n #!) - n
// 1 above first 100 primes found using Pn in sequence 1..100
pf = [ 1 <= n <= 100  ] ( check (1 + Pn n)  )
// list errors of of log primorial Pn n
CALC pf

// show as table
remaining = 100

*{ remaining
n = 101 - remaining ; pp1 = 1 + Pn n
CALC (n, pp1, check (pp1)  )
}*


!! lnp (n) = ln (n #!)
pp = [ 1 <= n <= 100  ] ( 1 + Pn n  )
pf = [ 1 <= n <= 100  ] ( lnp (1 + Pn n)  )
calc pp
calc pf

// regression that runs in real number application
lc = FITLINE  ( pf, pp  )
calc lc

