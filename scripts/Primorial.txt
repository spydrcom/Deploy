

//* Primorial numbers


// Pn = ( 1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 )

// OEIS for the Primorial sequence
A002110 = ( 1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810, 304250263527210, 13082761331670030, 614889782588491410, 32589158477190044730, 1922760350154212639070, 117288381359406970983270, 7858321551080267055879090 )

computed = [ 0 <= n < LENGTH A002110 ] ( (Pn(n)) #! )

ERRORS = [ 0 <= n < LENGTH A002110 ] ( A002110  -  computed )

CALC computed

CALC ERRORS


!! Compositorial (n) = n! / ( n #! )

// OEIS for the Compositorial sequence
A036691	= ( 1, 4, 24, 192, 1728, 17280, 207360, 2903040, 43545600, 696729600, 12541132800, 250822656000, 5267275776000, 115880067072000, 2781121609728000, 69528040243200000, 1807729046323200000, 48808684250726400000, 1366643159020339200000 )

Cn = ( 1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72 )

computed = [ 0 <= n < LENGTH A036691 ] ( Compositorial (Cn#n) )

ERRORS = [ 0 <= n < LENGTH A036691 ] ( A036691  -  computed )

CALC computed

CALC ERRORS


// look for primes at +1 and -1 from Primorials
// !! row (n, pn, pnp) = ( n, pn, pnp-1, pnp+1 )
// !! calcPNP (n, pn) = row ( n, pn,  pn #! )
// !! calcPN (n) = calcPNP ( n, Pn(n) )

// remaining = 28
// *{ remaining
// n = 30 - remaining
// CALC calcPN(n)
// }*


// alternative rendering of table

!! P(n) = n #!  ;  !! PNP (n) = P ( Pn n )
!! PNPm1 (n) = PNP(n) - 1  ;  !! PNPp1 (n) = PNP(n) + 1

// display as formatted table
tabulate [2 <= n <= 30] ( n, Pn n, PNPm1(n) , PNPp1(n)  )


// tables of prime counting functions

!! pi(x) = PIF x
// percent error of approximations - xLx and li specifically respectively
!! pct (x,apx) = 100* (pi x - apx) / (pi x)  ;   !! pxlx(x) = pct ( x, xLx x)  ;  !! pli(x) = pct ( x, li x)

// a table of pi, x/log x, and li giving values and percent error for each
tabulate [100 <= x <= 10000 <> 100] (  x, pi x, xLx x, pxlx x, li x, pli x  )


// table of prime counting parity functions
tabulate [900 <= x <= 1000 <> 1] (  x, pi x, mu x, OMEGA x, omega x, lambda x )

